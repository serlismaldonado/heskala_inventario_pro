generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TablePermission {
  id         String  @id @default(uuid())
  table_name String
  id_table   String
  can_create Boolean
  can_read   Boolean
  can_update Boolean
  can_delete Boolean
  roles      Role[]
}

model UserAction {
  id             String          @id @default(uuid())
  user_id        String
  table_name     String
  element_id     String
  action_type    ActionType      @relation(fields: [action_type_id], references: [id])
  action_type_id String
  created_at     DateTime        @default(now())
  user           UserPreferences @relation(fields: [user_id], references: [id])

  @@index([user_id, table_name, element_id], name: "user_action_index")
}

model ActionType {
  id           String       @id @default(uuid())
  name         String
  user_actions UserAction[]
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  last_name       String?
  hashed_password String?
  image           String?
  emailVerified   DateTime?
  preference      UserPreferences?
  id_company      String?
  company         Company?         @relation(fields: [id_company], references: [id])
  sessions        Session[]
  accounts        Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreferences {
  id           String       @id @default(uuid())
  theme        String
  user_id      String       @unique
  user         User         @relation(fields: [user_id], references: [id])
  role         Role         @relation(fields: [role_id], references: [id])
  role_id      String
  user_actions UserAction[]
  branches     Branch[]
}

model Role {
  id               String            @id @default(uuid())
  name             String
  description      String?
  user_preferences UserPreferences[]
  tables           TablePermission[]
}

model Company {
  id                  String           @id @default(uuid())
  name                String
  address             String
  phone               String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now())
  branches            Branch[]
  users               User[]
  customers           Customer[]
  suppliers           Supplier[]
  company_settings_id CompanySettings?
}

model CompanySettings {
  id                  String   @id @default(uuid())
  company             Company  @relation(fields: [company_id], references: [id])
  company_id          String   @unique
  taxes               Taxes[]
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())
  currency            String
  timezone            String
  date_format         String
  time_format         String
  decimal_separator   String
  thousands_separator String
  decimal_places      Int
}

model Taxes {
  id                 String          @id @default(uuid())
  company_setting    CompanySettings @relation(fields: [company_setting_id], references: [id])
  company_setting_id String
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now())
  name               String
  value              Float
  products           Product[]
}

model Branch {
  id         String            @id @default(uuid())
  name       String
  address    String
  phone      String
  company    Company           @relation(fields: [company_id], references: [id])
  employees  Employee[]
  products   Product[]
  users      UserPreferences[]
  company_id String
  created_at DateTime          @default(now())
  updated_at DateTime          @default(now())
}

model Supplier {
  id         String     @id
  name       String
  address    String
  email      String
  phone      String
  purchases  Purchase[]
  id_company String
  company    Company    @relation(fields: [id_company], references: [id])
}

model Customer {
  id         String           @id @default(uuid())
  name       String
  phones     CustomerPhones[]
  emails     CustomerEmails[]
  sales      Sale[]
  company    Company          @relation(fields: [company_id], references: [id])
  company_id String
}

model CustomerPhones {
  id          String   @id @default(uuid())
  customer_id String
  phone       String
  customer    Customer @relation(fields: [customer_id], references: [id])
}

model CustomerEmails {
  id          String   @id @default(uuid())
  customer_id String
  email       String
  customer    Customer @relation(fields: [customer_id], references: [id])
}

model Employee {
  id         String   @id @default(uuid())
  name       String
  address    String
  email      String
  phone      String
  branch     Branch   @relation(fields: [branch_id], references: [id])
  branch_id  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Sale {
  id                String         @id @default(uuid())
  sale_price        Float          @default(0)
  sold_quantity     Int            @default(0)
  sale_date         DateTime       @default(now())
  invoice_id        Invoice?
  customer_id       String
  customer          Customer       @relation(fields: [customer_id], references: [id])
  product_sales     ProductSales[]
  payment_method_id String
  payment_method    PaymentMethod  @relation(fields: [payment_method_id], references: [id])
  payment_type_id   String
  payment_type      PaymentType    @relation(fields: [payment_type_id], references: [id])
  credit_id         Credit?
  status            String         @default("Quoted")
}

model Credit {
  id            String          @id @default(uuid())
  sale_id       String          @unique
  sale          Sale            @relation(fields: [sale_id], references: [id])
  start_date    DateTime        @default(now())
  end_date      DateTime        @default(now())
  credit_date   DateTime        @default(now())
  credit_value  Float
  payments      CreditPayment[]
  credit_status String          @default("Pending")
}

model CreditPayment {
  id               String   @id @default(uuid())
  credit_id        String   @unique
  credit           Credit   @relation(fields: [credit_id], references: [id])
  payment_end_date DateTime @default(now())
  payment_date     DateTime @default(now())
  payment_value    Float
  status           String   @default("Pending")
}

model PaymentType {
  id          String  @id @default(uuid())
  name        String
  description String?
  sales       Sale[]
}

model ProductSales {
  id         String         @id @default(uuid())
  sale_id    String
  product_id String
  quantity   Int
  sale       Sale           @relation(fields: [sale_id], references: [id])
  product    ProductVersion @relation(fields: [product_id], references: [id])
  status     String         @default("Quoted")
}

model Invoice {
  id                String      @id @default(uuid())
  correlative_id    String      @unique
  invoice_header    String
  isv               Float       @default(0)
  sale_id           String      @unique
  total_sale_amount Float
  invoice_date      DateTime
  sale              Sale        @relation(fields: [sale_id], references: [id])
  correlative       Correlative @relation(fields: [correlative_id], references: [id])
}

model Correlative {
  id       String    @id @default(uuid())
  name     String
  prefix   String
  suffix   String
  start    Int
  end      Int
  current  Int
  invoices Invoice[]
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String
  taxes       Taxes[]
  versions    ProductVersion[]
  brand_id    String
  brand       Brand            @relation(fields: [brand_id], references: [id])
  branch      Branch           @relation(fields: [branch_id], references: [id])
  branch_id   String
}

model ProductVersion {
  id             String         @id @default(uuid())
  product_id     String
  product        Product        @relation(fields: [product_id], references: [id])
  name           String
  description    String
  barcode        String?        @unique
  sale_price     Float
  purchase_price Float
  stock_quantity Int
  properties     Property[]
  purchases      Purchase[]
  product_sales  ProductSales[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
}

model Property {
  id          String         @id
  category    Category       @relation(fields: [id_category], references: [id])
  id_category String
  name        String
  value       String
  product_id  String
  product     ProductVersion @relation(fields: [product_id], references: [id])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String
  properties  Property[]
}

model Brand {
  id                 String            @id @default(uuid())
  name               String
  products           Product[]
  product_categories ProductCategory[]
}

model ProductCategory {
  id     String  @id @default(uuid())
  name   String
  brands Brand[]
}

model Purchase {
  id                 String         @id
  supplier_id        String
  product_id         String
  purchase_price     Float
  purchased_quantity Int
  purchase_date      DateTime       @default(now())
  product            ProductVersion @relation(fields: [product_id], references: [id])
  supplier           Supplier       @relation(fields: [supplier_id], references: [id])
}

model PaymentMethod {
  id    String @id @default(uuid())
  name  String
  sales Sale[]
}

// NOTAS DE PRODUCTOS
// 1. Un producto puede tener varias versiones
// 2. Una version de producto puede tener varias propiedades
// 3. Una propiedad puede tener un valor
// 4. Una propiedad puede tener una categoria
// 5. Una categoria puede tener varias propiedades
// 6. Una categoria puede tener un nombre y una descripcion
// 7. Una marca puede tener varios productos
// 8. Un producto puede tener una marca
// 9. Un producto puede tener impuestos

// NOTAS DE VENTAS
// 1. Una venta puede tener varios productos
// 2. Un producto puede tener varias ventas
// 3. Una venta puede tener un cliente
// 4. Un cliente puede tener varias ventas
// 5. Una venta puede tener un precio de venta
// 6. Una venta puede tener una cantidad vendida
// 7. Una venta puede tener un monto total
// 8. Una venta puede tener un monto de isv
// 9. Una venta puede tener una fecha de venta
// 10. Una venta puede tener un estado

// NOTAS DE COMPRAS
// 1. Una compra puede tener un proveedor
// 2. Un proveedor puede tener varias compras
// 3. Una compra puede tener un producto
// 4. Un producto puede tener varias compras
// 5. Una compra puede tener un precio de compra
// 6. Una compra puede tener una cantidad comprada
// 7. Una compra puede tener una fecha de compra

// NOTAS DE CLIENTES
// 1. Un cliente puede tener varios telefonos
// 2. Un telefono puede tener un cliente
// 3. Un cliente puede tener varios correos
// 4. Un correo puede tener un cliente

// NOTAS DE PROVEEDORES
// 1. Un proveedor puede tener varios telefonos
// 2. Un telefono puede tener un proveedor
// 3. Un proveedor puede tener varios correos
// 4. Un correo puede tener un proveedor

// NOTAS DE EMPLEADOS
// 1. Un empleado puede tener un nombre
// 2. Un empleado puede tener una direccion
// 3. Un empleado puede tener un correo
// 4. Un empleado puede tener un telefono
// 5. Un empleado puede tener una sucursal
// 6. Una sucursal puede tener varios empleados

// NOTAS DE SUCURSALES
// 1. Una sucursal puede tener un nombre
// 2. Una sucursal puede tener una direccion
// 3. Una sucursal puede tener un telefono
// 4. Una sucursal puede tener un correo
// 5. Una sucursal puede tener un empleado
// 6. Un empleado puede tener una sucursal
// 7. Una sucursal pertenece a una empresa
// 8. Una empresa puede tener varias sucursales

// NOTAS DE EMPRESAS
// 1. Una empresa puede tener un nombre
// 2. Una empresa puede tener una direccion
// 3. Una empresa puede tener un telefono
// 4. Una empresa puede tener un correo
// 5. Una empresa puede tener varias sucursales
// 6. Una sucursal puede tener una empresa

// NOTAS DE CORRELATIVOS
// 1. Un correlativo puede tener un nombre
// 2. Un correlativo puede tener un prefijo
// 3. Un correlativo puede tener un sufijo
// 4. Un correlativo puede tener un inicio
// 5. Un correlativo puede tener un fin
// 6. Un correlativo puede tener un actual
// 7. Un correlativo puede tener varias facturas
// 8. Una factura puede tener un correlativo

// NOTAS DE FACTURAS
// 1. Una factura puede tener un encabezado
// 2. Una factura puede tener un isv
// 3. Una factura puede tener un monto total
// 4. Una factura puede tener una fecha de factura
// 5. Una factura puede tener una venta
// 6. Una venta puede tener una factura
// 7. Una factura puede tener un correlativo
// 8. Un correlativo puede tener una factura

// NOTAS DE USUARIOS
// 1. Un usuario puede tener un nombre
// 2. Un usuario puede tener un correo
// 3. Un usuario puede tener una contraseña
// 4. Un usuario puede tener un rol
// 5. Un rol puede tener varios usuarios

// NOTAS DE ROLES
// 1. Un rol puede tener un nombre
// 2. Un rol puede tener una descripcion
// 3. Un rol puede tener varios usuarios
// 4. Un usuario puede tener un rol

// NOTAS DE PERMISOS DE TABLAS
// 1. Un permiso de tabla puede tener un nombre
// 2. Un permiso de tabla puede tener una descripcion
// 3. Un permiso de tabla puede tener un rol
// 4. Un rol puede tener varios permisos de tabla
